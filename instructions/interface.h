/*==========================================================*
 *
 * @author Gustaf Franzén :: https://github.com/BjorneEk;
 * @author Adam Månsson
 *
 * instructions
 *==========================================================*/
#ifndef _INTERFACE_H_
#define _INTERFACE_H_

#define XMACRO_REGISTER(X)	\
	X(R0)	X(R1)	X(R2)	\
	X(R3)	X(R4)	X(R5)	\
	X(R6)	X(R7)	X(R8)	\
	X(R9)	X(R10)	X(R11)	\
	X(STACK_POINTER)	\
	X(PROCESSOR_STATUS)	\
	X(PROGRAM_COUNTER_L)	\
	X(PROGRAM_COUNTER_H)

enum endian_ {
	LITTLE_ENDIAN,
	BIG_ENDIAN
};

typedef enum reg_type {
	REG_R0 = 0,
	REG_R1,
	REG_R2,
	REG_R3,
	REG_R4,
	REG_R5,
	REG_R6,
	REG_R7,
	REG_R8,
	REG_R9,
	REG_R10,
	REG_R11,
	REG_STACK_POINTER,
	REG_PROCESSOR_STATUS,
	REG_PROGRAM_COUNTER_L,
	REG_PROGRAM_COUNTER_H
} reg_type_t;

#define XMACRO_ADDRESSING_MODES(X)	\
	X(IMMIDIATE)	X(REG)		\
	X(ABS)		X(ABS_PTR)	\
	X(ABS_IDX)	X(ABS_PTR_IDX)	\
	X(ABS_PTR_OFF)	X(ZP_PTR)	\
	X(ZP_OFF)	X(ZP_IDX)

typedef enum addressing_mode {
	ADDR_MODE_IMMIDIATE = 0,
	ADDR_MODE_REG,
	ADDR_MODE_ABS,
	ADDR_MODE_ABS_PTR,
	ADDR_MODE_ABS_IDX,
	ADDR_MODE_ABS_PTR_IDX,
	ADDR_MODE_ABS_PTR_OFF,
	ADDR_MODE_ZP_PTR,
	ADDR_MODE_ZP_OFF,
	ADDR_MODE_ZP_IDX,
	ADDR_MODE_NULL
} addressing_mode_t;

typedef enum subinstruction_type {
	SINSTR_NOP = 0,
	SINSTR_BRK,

	SINSTR_LDR_ABS,
	SINSTR_LDR_ABS_PTR,
	SINSTR_LDR_ABS_IDX,
	SINSTR_LDR_ABS_PTR_IDX,
	SINSTR_LDR_ABS_PTR_OFF,
	SINSTR_LDR_ZP_PTR,
	SINSTR_LDR_ZP_OFF,
	SINSTR_LDR_ZP_IDX,

	SINSTR_LDRB_ABS,
	SINSTR_LDRB_ABS_PTR,
	SINSTR_LDRB_ABS_IDX,
	SINSTR_LDRB_ABS_PTR_IDX,
	SINSTR_LDRB_ABS_PTR_OFF,
	SINSTR_LDRB_ZP_PTR,
	SINSTR_LDRB_ZP_OFF,
	SINSTR_LDRB_ZP_IDX,

	SINSTR_LDRW_ABS,
	SINSTR_LDRW_ABS_PTR,
	SINSTR_LDRW_ABS_IDX,
	SINSTR_LDRW_ABS_PTR_IDX,
	SINSTR_LDRW_ABS_PTR_OFF,
	SINSTR_LDRW_ZP_PTR,
	SINSTR_LDRW_ZP_OFF,
	SINSTR_LDRW_ZP_IDX,

	SINSTR_STR_ABS,
	SINSTR_STR_ABS_PTR,
	SINSTR_STR_ABS_IDX,
	SINSTR_STR_ABS_PTR_IDX,
	SINSTR_STR_ABS_PTR_OFF,
	SINSTR_STR_ZP_PTR,
	SINSTR_STR_ZP_OFF,
	SINSTR_STR_ZP_IDX,

	SINSTR_STRB_ABS,
	SINSTR_STRB_ABS_PTR,
	SINSTR_STRB_ABS_IDX,
	SINSTR_STRB_ABS_PTR_IDX,
	SINSTR_STRB_ABS_PTR_OFF,
	SINSTR_STRB_ZP_PTR,
	SINSTR_STRB_ZP_OFF,
	SINSTR_STRB_ZP_IDX,

	SINSTR_CPRP,

	SINSTR_BZ,

	SINSTR_BNZ,

	SINSTR_BCC,

	SINSTR_BCS,

	SINSTR_BRN,

	SINSTR_BRP,

	SINSTR_BBS,
	SINSTR_BBC,

	SINSTR_BRA,

	SINSTR_LBRA_ABS,
	SINSTR_LBRA_ABS_PTR,

	SINSTR_CALL_ABS,
	SINSTR_CALL_ABS_PTR,
	SINSTR_CALL_ZP_PTR,

	SINSTR_RET,

	SINSTR_RTI,

	SINSTR_ADC_IMMIDIATE,
	SINSTR_ADC_REG,
	SINSTR_ADC_ABS,
	SINSTR_ADC_ABS_PTR,
	SINSTR_ADC_ABS_IDX,
	SINSTR_ADC_ABS_PTR_IDX,
	SINSTR_ADC_ABS_PTR_OFF,
	SINSTR_ADC_ZP_PTR,
	SINSTR_ADC_ZP_OFF,
	SINSTR_ADC_ZP_IDX,

	SINSTR_ADD_IMMIDIATE,
	SINSTR_ADD_REG,
	SINSTR_ADD_ABS,
	SINSTR_ADD_ABS_PTR,
	SINSTR_ADD_ABS_IDX,
	SINSTR_ADD_ABS_PTR_IDX,
	SINSTR_ADD_ABS_PTR_OFF,
	SINSTR_ADD_ZP_PTR,
	SINSTR_ADD_ZP_OFF,
	SINSTR_ADD_ZP_IDX,

	SINSTR_ADCW_IMMIDIATE,
	SINSTR_ADCW_REG,
	SINSTR_ADCW_ABS,
	SINSTR_ADCW_ABS_PTR,
	SINSTR_ADCW_ABS_IDX,
	SINSTR_ADCW_ABS_PTR_IDX,
	SINSTR_ADCW_ABS_PTR_OFF,
	SINSTR_ADCW_ZP_PTR,
	SINSTR_ADCW_ZP_OFF,
	SINSTR_ADCW_ZP_IDX,

	SINSTR_ADDW_IMMIDIATE,
	SINSTR_ADDW_REG,
	SINSTR_ADDW_ABS,
	SINSTR_ADDW_ABS_PTR,
	SINSTR_ADDW_ABS_IDX,
	SINSTR_ADDW_ABS_PTR_IDX,
	SINSTR_ADDW_ABS_PTR_OFF,
	SINSTR_ADDW_ZP_PTR,
	SINSTR_ADDW_ZP_OFF,
	SINSTR_ADDW_ZP_IDX,

	SINSTR_SBC_IMMIDIATE,
	SINSTR_SBC_REG,
	SINSTR_SBC_ABS,
	SINSTR_SBC_ABS_PTR,
	SINSTR_SBC_ABS_IDX,
	SINSTR_SBC_ABS_PTR_IDX,
	SINSTR_SBC_ABS_PTR_OFF,
	SINSTR_SBC_ZP_PTR,
	SINSTR_SBC_ZP_OFF,
	SINSTR_SBC_ZP_IDX,

	SINSTR_SUB_IMMIDIATE,
	SINSTR_SUB_REG,
	SINSTR_SUB_ABS,
	SINSTR_SUB_ABS_PTR,
	SINSTR_SUB_ABS_IDX,
	SINSTR_SUB_ABS_PTR_IDX,
	SINSTR_SUB_ABS_PTR_OFF,
	SINSTR_SUB_ZP_PTR,
	SINSTR_SUB_ZP_OFF,
	SINSTR_SUB_ZP_IDX,

	SINSTR_SBCW_IMMIDIATE,
	SINSTR_SBCW_REG,
	SINSTR_SBCW_ABS,
	SINSTR_SBCW_ABS_PTR,
	SINSTR_SBCW_ABS_IDX,
	SINSTR_SBCW_ABS_PTR_IDX,
	SINSTR_SBCW_ABS_PTR_OFF,
	SINSTR_SBCW_ZP_PTR,
	SINSTR_SBCW_ZP_OFF,
	SINSTR_SBCW_ZP_IDX,

	SINSTR_SUBW_IMMIDIATE,
	SINSTR_SUBW_REG,
	SINSTR_SUBW_ABS,
	SINSTR_SUBW_ABS_PTR,
	SINSTR_SUBW_ABS_IDX,
	SINSTR_SUBW_ABS_PTR_IDX,
	SINSTR_SUBW_ABS_PTR_OFF,
	SINSTR_SUBW_ZP_PTR,
	SINSTR_SUBW_ZP_OFF,
	SINSTR_SUBW_ZP_IDX,

	SINSTR_EOR_IMMIDIATE,
	SINSTR_EOR_REG,
	SINSTR_EOR_ABS,
	SINSTR_EOR_ABS_PTR,
	SINSTR_EOR_ABS_IDX,
	SINSTR_EOR_ABS_PTR_IDX,
	SINSTR_EOR_ABS_PTR_OFF,
	SINSTR_EOR_ZP_PTR,
	SINSTR_EOR_ZP_OFF,
	SINSTR_EOR_ZP_IDX,

	SINSTR_ORR_IMMIDIATE,
	SINSTR_ORR_REG,
	SINSTR_ORR_ABS,
	SINSTR_ORR_ABS_PTR,
	SINSTR_ORR_ABS_IDX,
	SINSTR_ORR_ABS_PTR_IDX,
	SINSTR_ORR_ABS_PTR_OFF,
	SINSTR_ORR_ZP_PTR,
	SINSTR_ORR_ZP_OFF,
	SINSTR_ORR_ZP_IDX,

	SINSTR_AND_IMMIDIATE,
	SINSTR_AND_REG,
	SINSTR_AND_ABS,
	SINSTR_AND_ABS_PTR,
	SINSTR_AND_ABS_IDX,
	SINSTR_AND_ABS_PTR_IDX,
	SINSTR_AND_ABS_PTR_OFF,
	SINSTR_AND_ZP_PTR,
	SINSTR_AND_ZP_OFF,
	SINSTR_AND_ZP_IDX,

	SINSTR_CMP_IMMIDIATE,
	SINSTR_CMP_REG,
	SINSTR_CMP_ABS,
	SINSTR_CMP_ABS_PTR,
	SINSTR_CMP_ABS_IDX,
	SINSTR_CMP_ABS_PTR_IDX,
	SINSTR_CMP_ABS_PTR_OFF,
	SINSTR_CMP_ZP_PTR,
	SINSTR_CMP_ZP_OFF,
	SINSTR_CMP_ZP_IDX,

	SINSTR_ASR,

	SINSTR_LSR,

	SINSTR_LSL,

	SINSTR_NOT,

	SINSTR_DEC,

	SINSTR_DECW,

	SINSTR_INC,

	SINSTR_INCW,

	SINSTR_CRB_IMMIDIATE,
	SINSTR_CRB_REG,
	SINSTR_CRB_ABS,
	SINSTR_CRB_ABS_PTR,
	SINSTR_CRB_ABS_IDX,
	SINSTR_CRB_ABS_PTR_IDX,
	SINSTR_CRB_ABS_PTR_OFF,
	SINSTR_CRB_ZP_PTR,
	SINSTR_CRB_ZP_OFF,
	SINSTR_CRB_ZP_IDX,

	SINSTR_SRB_IMMIDIATE,
	SINSTR_SRB_REG,
	SINSTR_SRB_ABS,
	SINSTR_SRB_ABS_PTR,
	SINSTR_SRB_ABS_IDX,
	SINSTR_SRB_ABS_PTR_IDX,
	SINSTR_SRB_ABS_PTR_OFF,
	SINSTR_SRB_ZP_PTR,
	SINSTR_SRB_ZP_OFF,
	SINSTR_SRB_ZP_IDX,

	SINSTR_NULL	// used to extend enum
} subinstruction_type_t;

#define XMACRO_INSTRUCTIONS(X)	\
	X(NOP)	X(BRK)	X(LDR)	\
	X(LDRB)	X(LDRW)	X(STR)	\
	X(STRB)	X(CPRP)		\
	X(BZ)	X(BNZ)	X(BCC)	\
	X(BCS)	X(BRN)	X(BRP)	\
	X(BBS)	X(BBC)	X(BRA)	\
	X(LBRA)	X(CALL)	X(RET)	\
	X(RTI)	X(ADC)	X(ADD)	\
	X(ADCW)	X(ADDW)	X(SBC)	\
	X(SUB)	X(SBCW)	X(SUBW)	\
	X(EOR)	X(ORR)	X(AND)	\
	X(CMP)	X(ASR)	X(LSL)	\
	X(LSR)	X(NOT)	X(DEC)	\
	X(DECW)	X(INC)	X(INCW)	\
	X(CRB)	X(SRB)

typedef enum instruction_type {
	INSTR_NOP	=	SINSTR_NOP,
	INSTR_BRK	=	SINSTR_BRK,
	INSTR_LDR	=	SINSTR_LDR_ABS,
	INSTR_LDRB	=	SINSTR_LDRB_ABS,
	INSTR_LDRW	=	SINSTR_LDRW_ABS,
	INSTR_STR	=	SINSTR_STR_ABS,
	INSTR_STRB	=	SINSTR_STRB_ABS,
	INSTR_CPRP	=	SINSTR_CPRP,
	INSTR_BZ	=	SINSTR_BZ,
	INSTR_BNZ	=	SINSTR_BNZ,
	INSTR_BCC	=	SINSTR_BCC,
	INSTR_BCS	=	SINSTR_BCS,
	INSTR_BRN	=	SINSTR_BRN,
	INSTR_BRP	=	SINSTR_BRP,
	INSTR_BBS	=	SINSTR_BBS,
	INSTR_BBC	=	SINSTR_BBC,
	INSTR_BRA	=	SINSTR_BRA,
	INSTR_LBRA	=	SINSTR_LBRA_ABS,
	INSTR_CALL	=	SINSTR_CALL_ABS,
	INSTR_RET	=	SINSTR_RET,
	INSTR_RTI	=	SINSTR_RTI,
	INSTR_ADC	=	SINSTR_ADC_IMMIDIATE,
	INSTR_ADD	=	SINSTR_ADD_IMMIDIATE,
	INSTR_ADCW	=	SINSTR_ADCW_IMMIDIATE,
	INSTR_ADDW	=	SINSTR_ADDW_IMMIDIATE,
	INSTR_SBC	=	SINSTR_SBC_IMMIDIATE,
	INSTR_SUB	=	SINSTR_SUB_IMMIDIATE,
	INSTR_SBCW	=	SINSTR_SBCW_IMMIDIATE,
	INSTR_SUBW	=	SINSTR_SUBW_IMMIDIATE,
	INSTR_EOR	=	SINSTR_EOR_IMMIDIATE,
	INSTR_ORR	=	SINSTR_ORR_IMMIDIATE,
	INSTR_AND	=	SINSTR_AND_IMMIDIATE,
	INSTR_CMP	=	SINSTR_CMP_IMMIDIATE,
	INSTR_ASR	=	SINSTR_ASR,
	INSTR_LSL	=	SINSTR_LSL,
	INSTR_LSR	=	SINSTR_LSR,
	INSTR_NOT	=	SINSTR_NOT,
	INSTR_DEC	=	SINSTR_DEC,
	INSTR_DECW	=	SINSTR_DECW,
	INSTR_INC	=	SINSTR_INC,
	INSTR_INCW	=	SINSTR_INCW,
	INSTR_CRB	=	SINSTR_CRB_IMMIDIATE,
	INSTR_SRB	=	SINSTR_SRB_IMMIDIATE,

	INSTR_NULL	// used to extend enum
} instruction_type_t;

extern int addressing_mode_size[ADDR_MODE_NULL];
extern int instrution_size[INSTR_NULL];
extern int endian;

#endif /* _INTERFACE_H_ */